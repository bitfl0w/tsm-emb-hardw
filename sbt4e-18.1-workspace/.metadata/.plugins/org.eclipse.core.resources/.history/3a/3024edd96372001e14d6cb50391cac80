/*
 * main.c
 *
 *  Created on: Oct 24, 2023
 *      Author: Thomas
 */


#include <stdio.h>
#include <stdbool.h>
#include "io.h"
#include "system.h"
#include "alt_types.h"
#include "sys/alt_irq.h"
#include "priv/alt_legacy_irq.h"
#define COUNT_MAX 1000
#define CLEAR_IRQ 0x0000
#define PERFORMANCE_COUNTER_SEG_ISR 1

typedef struct Counter
{
    alt_u32 value;
    bool isNew;
} Counter;

static void handle_timerIRQ(void *context, alt_u32 id) __attribute__ ((section
		(".exceptions")));

int main(void)
{
    Counter downTimer = {.value = 0, .isNew = false};
    alt_irq_context statusISR;

    puts("Enabled all IRQs\n");
    while (downTimer.value <= COUNT_MAX)
    {
        if (downTimer.isNew)
            printf("New count value = %lu\n", (alt_u32)(downTimer.isNew = false,
                                                        downTimer.value));
        asm volatile("nop");
    }
    puts("Stop measuring with performance counter");

}

static void handle_timerIRQ(void *context, alt_u32 id)
{
    Counter *data_ptr = (Counter *)context;
    ++(data_ptr->value);
    data_ptr->isNew = true;
    IOWR_8DIRECT(LED_BASE, 0, data_ptr->value);
    IOWR_16DIRECT(TIMER_BASE, ALTERA_AVALON_TIMER_STATUS_REG, CLEAR_IRQ);
}
